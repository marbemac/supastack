import { d, b, f, c, e, a, g } from './chunk-HHQZCQ2Q.js';
import { twMerge, extendTailwindMerge } from 'tailwind-merge';

var st={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},Y=i=>i||void 0,M=(...i)=>Y(d(i).filter(Boolean).join(" ")),k=null,O={},F=!1,v=(...i)=>d=>d.twMerge?((!k||F)&&(F=!1,k=b(O)?twMerge:extendTailwindMerge(O)),Y(k(M(i)))):M(i),X=(i,d)=>{for(let e in d)i.hasOwnProperty(e)?i[e]=M(i[e],d[e]):i[e]=d[e];return i},lt=(i,d)=>{let{extend:e$1=null,slots:w={},variants:R={},compoundVariants:C=[],compoundSlots:V=[],defaultVariants:q={}}=i,c$1={...st,...d},$=e$1!=null&&e$1.base?M(e$1.base,i==null?void 0:i.base):i==null?void 0:i.base,y=e$1!=null&&e$1.variants&&!b(e$1.variants)?f(R,e$1.variants):R,A=e$1!=null&&e$1.defaultVariants&&!b(e$1.defaultVariants)?{...e$1.defaultVariants,...q}:q;!b(c$1.twMergeConfig)&&!c(c$1.twMergeConfig,O)&&(F=!0,O=c$1.twMergeConfig);let N=b(w)?{}:{base:i==null?void 0:i.base,...w},h=b(e$1==null?void 0:e$1.slots)?N:X(e$1==null?void 0:e$1.slots,b(N)?{base:i==null?void 0:i.base}:N),m=l=>{var D,G;if(b(y)&&b(w)&&b(e$1==null?void 0:e$1.slots))return v($,l==null?void 0:l.class,l==null?void 0:l.className)(c$1);if(C&&!Array.isArray(C))throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof C}`);if(V&&!Array.isArray(V))throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof V}`);let _=(t,r,f=[],s)=>{let a=f;if(typeof r=="string")a.push(g(r).split(" ").map(n=>`${t}:${n}`));else if(Array.isArray(r))a.push(r.flatMap(n=>`${t}:${n}`));else if(typeof r=="object"&&typeof s=="string"){let n=r==null?void 0:r[s];if(n&&typeof n=="string"){let o=g(n);a[s]=a[s]?[...a[s],...o.split(" ").map(g=>`${t}:${g}`)]:o.split(" ").map(g=>`${t}:${g}`);}else Array.isArray(n)&&n.length>0&&(a[s]=n.flatMap(o=>`${t}:${o}`));}return a},P=(t,r=y,f=null)=>{let s=r==null?void 0:r[t];if(!s||b(s))return null;let a$1=l==null?void 0:l[t];if(a$1===null)return null;let n=a(a$1),o=Array.isArray(c$1.responsiveVariants)&&c$1.responsiveVariants.length>0||c$1.responsiveVariants===!0,g=A==null?void 0:A[t],b$1=[];typeof n=="object"&&o&&(b$1=Object.keys(n).reduce((T,j)=>{let H=n[j],rt=s==null?void 0:s[H];return j==="initial"?(g=H,T):Array.isArray(c$1.responsiveVariants)&&!c$1.responsiveVariants.includes(j)?T:_(j,rt,T,f)},[]));let S=s[n]||s[a(g)];return typeof b$1=="object"&&typeof f=="string"&&b$1[f]?X(b$1,S):b$1.length>0?[S,...b$1]:S},x=()=>y?Object.keys(y).map(t=>P(t,y)):null,K=t=>!y||typeof y!="object"?null:Object.keys(y).reduce((r,f)=>{let s=P(f,y,t),a=t==="base"&&typeof s=="string"?s:s&&s[t];return a&&r.push(a),r},[]),p=l&&Object.fromEntries(Object.entries(l).filter(([,t])=>t!==void 0)),U=t=>{var f;let r=typeof(l==null?void 0:l[t])=="object"?{[t]:(f=l[t])==null?void 0:f.initial}:{};return {...A,...p,...r}},W=(t=[])=>t==null?void 0:t.filter(({class:r,className:f,...s})=>Object.entries(s).every(([a,n])=>{let o=U(a);return Array.isArray(n)?n.includes(o[a]):o[a]===n})).flatMap(({class:r,className:f})=>[r,f]),z=()=>{let t=W(C),r=W(e$1==null?void 0:e$1.compoundVariants);return e(r,t)},tt=()=>{let t=z();return Array.isArray(t)?t.reduce((r,f)=>{if(typeof f=="string"&&(r.base=v(r.base,f)(c$1)),typeof f=="object"){let s=Object.keys(f);for(let a of s)r[a]=v(r[a],f[a])(c$1);}return r},{}):t},et=()=>V.length<1?null:V.reduce((t,r)=>{let{slots:f=[],class:s,className:a,...n}=r;if(!b(n)){let o=Object.keys(n);for(let g of o){let b=U(g)[g];if(b===void 0||b!==n[g])return t}}for(let o of f)t[o]||(t[o]=[]),t[o].push([s,a]);return t},{});if(!b(w)||!b(e$1==null?void 0:e$1.slots)){let t=(D=tt())!=null?D:[],r=(G=et())!=null?G:[];return {...typeof h=="object"&&!b(h)?Object.keys(h).reduce((s,a)=>(s[a]=n=>v(h[a],K(a),t==null?void 0:t[a],r==null?void 0:r[a],n==null?void 0:n.class,n==null?void 0:n.className)(c$1),s),{}):{}}}return v($,x(),z(),l==null?void 0:l.class,l==null?void 0:l.className)(c$1)},Z=()=>{if(!(!y||typeof y!="object"))return Object.keys(y)};return m.variantKeys=Z(),m.extend=e$1,m.base=$,m.slots=h,m.variants=y,m.defaultVariants=A,m.compoundSlots=V,m.compoundVariants=C,m};

export { v as cn, M as cnBase, st as defaultConfig, lt as tv, Y as voidEmpty };
